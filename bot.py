import os
from flask import Flask
import threading

app = Flask(__name__)

@app.route('/')
def home():
    return "Telegram Bot is running!"

@app.route('/health')
def health():
    return "OK"

def run_web_server():
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

# –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –±–æ—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ
# ... –≤–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ–¥ ...
import os
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from deep_translator import GoogleTranslator
from gtts import gTTS
import speech_recognition as sr
from pydub import AudioSegment

# üîë –í–∞—à —Ç–æ–∫–µ–Ω
TOKEN = "8083120011:AAHs2PDQSa1GmOHJ7RzfoXbIc3Q87174VYU"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

recognizer = sr.Recognizer()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {user.first_name} (ID: {user.id})")

    voice_file = await update.message.voice.get_file()
    ogg_path = f"{voice_file.file_id}.ogg"
    wav_path = f"{voice_file.file_id}.wav"

    try:
        await voice_file.download_to_drive(ogg_path)
        audio = AudioSegment.from_ogg(ogg_path)
        audio.export(wav_path, format="wav")

        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            text = None
            detected_lang = None

            try:
                text = recognizer.recognize_google(audio_data, language="de-DE")
                detected_lang = "de"
            except sr.UnknownValueError:
                try:
                    text = recognizer.recognize_google(audio_data, language="ru-RU")
                    detected_lang = "ru"
                except sr.UnknownValueError:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
                    return

        await process_translation(update, text, detected_lang)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.")
    finally:
        for f in [ogg_path, wav_path]:
            if os.path.exists(f):
                os.remove(f)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        return

    user = update.message.from_user
    logger.info(f"–¢–µ–∫—Å—Ç –æ—Ç {user.first_name}: {text}")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ —Å–∏–º–≤–æ–ª–∞–º (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
        has_cyrillic = any('–∞' <= c.lower() <= '—è' or c in '—ë–Å' for c in text)
        detected_lang = "ru" if has_cyrillic else "de"

        await process_translation(update, text, detected_lang)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç.")

# === –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ–∑–≤—É—á–∫–∏ ===
async def process_translation(update: Update, text: str, src_lang: str):
    try:
        if src_lang == "de":
            translation = GoogleTranslator(source='de', target='ru').translate(text)
            target_lang = 'ru'
            reply_text = f"üá©üá™ ‚Üí üá∑üá∫\n{text}\n\n–ü–µ—Ä–µ–≤–æ–¥:\n{translation}"
        else:
            translation = GoogleTranslator(source='ru', target='de').translate(text)
            target_lang = 'de'
            reply_text = f"üá∑üá∫ ‚Üí üá©üá™\n{text}\n\n√úbersetzung:\n{translation}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await update.message.reply_text(reply_text)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ
        tts = gTTS(text=translation, lang=target_lang, slow=False)
        mp3_path = f"reply_{hash(text)}.mp3"
        tts.save(mp3_path)

        with open(mp3_path, 'rb') as audio:
            await update.message.reply_voice(voice=audio)

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        if os.path.exists(mp3_path):
            os.remove(mp3_path)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ/–æ–∑–≤—É—á–∫–µ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∏–ª–∏ –æ–∑–≤—É—á–∫–µ.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ì–û–õ–û–°–û–í–´–ï –∏–ª–∏ –¢–ï–ö–°–¢ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ–∑–≤—É—á–∫—É.")
    app.run_polling()

if __name__ == '__main__':
    if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    web_thread = threading.Thread(target=run_web_server)
    web_thread.daemon = True
    web_thread.start()
    
    # –ó–¥–µ—Å—å –∑–∞–ø—É—Å–∫ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä: bot.polling() –∏–ª–∏ bot.infinity_polling()

    main()
